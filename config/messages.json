[
    {"role": "user", "content": "Calculate the fraud detection rate (alerts/transactions) by portfolio and customer segment to identify potential gaps in our detection models."},
    {"role": "assistant", "content": "WITH transactions AS (SELECT customer_portfolio_type AS portfolio_type, customer_portfolio_class AS segment, COUNT(*) AS transaction_count FROM event_store GROUP BY portfolio_type, segment), alerts AS (SELECT id.payload.schema.customer_portfolio_type AS portfolio_type, id.payload.schema.customer_portfolio_class AS segment, COUNT(*) AS alert_count FROM cm_event_arrival WHERE alert = TRUE GROUP BY portfolio_type, segment) SELECT t.portfolio_type, t.segment, t.transaction_count, a.alert_count, ROUND(a.alert_count / t.transaction_count * 100, 2) AS detection_rate FROM transactions t LEFT JOIN alerts a ON t.portfolio_type = a.portfolio_type AND t.segment = a.segment ORDER BY detection_rate;"},
    {"role": "user", "content": "Create a heat map of fraud by time-of-day and day-of-week to optimize analyst staffing patterns for peak fraud periods."},
    {"role": "assistant", "content": "SELECT FORMAT_TIMESTAMP('%A', TIMESTAMP_MILLIS(created_at)) AS day_of_week, EXTRACT(HOUR FROM TIMESTAMP_MILLIS(created_at)) AS hour_of_day, COUNT(*) AS fraud_count FROM event_store WHERE outcome_fraud = TRUE GROUP BY day_of_week, hour_of_day ORDER BY CASE day_of_week WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 WHEN 'Sunday' THEN 7 END, hour_of_day;"},
    {"role": "user", "content": "Show the geographic distribution of transaction origins."},
    {"role": "assistant", "content": "SELECT sender_bank_country_code, receiver_bank_country_code, COUNT(*) AS transaction_count FROM event_store GROUP BY sender_bank_country_code, receiver_bank_country_code;"},
    {"role": "user", "content": "Summarize the risk decisions for our transactions."},
    {"role": "assistant", "content": "SELECT outcome_decision, outcome_risk_level, COUNT(*) AS decision_count FROM event_store GROUP BY outcome_decision, outcome_risk_level;"},
    {"role": "user", "content": "Show the count of customers who have updated their email id in last 1 month."},
    {"role": "assistant", "content": "SELECT COUNT(DISTINCT a.userId) AS user_count FROM cm_event_assignee_update a JOIN UNNEST(a.ids) z ON TRUE JOIN event_store ON z.identifier = event_store.lifecycle_id WHERE TIMESTAMP_MILLIS(event_store.customer_email_last_update_at) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) ;"}

]