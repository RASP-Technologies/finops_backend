{"table_name": "cm_driver_master", "description": "Stores information about driver master events including lifecycle ID, timestamps, and update timestamps. Can be joined with other tables using lifecycle_id.", "example_queries": ["List all events with their lifecycle IDs", "Find events that occurred in the last month", "Count the number of events with a specific lifecycle ID", "Show events that were updated in the last week", "SELECT lifecycle_id, start_timestamp, end_timestamp FROM cm_driver_master WHERE start_timestamp > TIMESTAMP '2025-01-15'", "SELECT DATE(start_timestamp) as event_date, COUNT(*) as event_count FROM cm_driver_master GROUP BY event_date ORDER BY event_date DESC", "SELECT e.lifecycle_id, e.event_type, e.customer_id, e.sender_transaction_amount, d.start_timestamp, d.end_timestamp, TIMESTAMP_DIFF(d.end_timestamp, d.start_timestamp, MINUTE) as processing_time_minutes FROM event_store e JOIN cm_driver_master d ON e.lifecycle_id = d.lifecycle_id WHERE e.outcome_decision = 'REVIEW'"]}
{"table_name": "cm_event_queue_changed", "description": "Stores information about changes in event queues including version, IDs, and timestamps. Can be joined with other tables using column 'ids.identifier'.", "example_queries": ["List all queue changes with their lifecycle IDs", "Find queue changes that occurred in the last month", "Count the number of queue changes with a specific lifecycle ID", "Show queue changes that were updated in the last week", "SELECT queueId, COUNT(*) as event_count FROM cm_event_queue_changed GROUP BY queueId ORDER BY event_count DESC", "SELECT ids[OFFSET(0)].identifier as lifecycle_id, ids[OFFSET(0)].payload.schema.event_type as event_type, queueId FROM cm_event_queue_changed WHERE ids[OFFSET(0)].payload.schema.event_type = 'PAYMENT_DELAYED' LIMIT 10;", "SELECT e.lifecycle_id, e.event_type, e.sender_transaction_amount, q.queueId as current_queue, TIMESTAMP(q.timestamp) as queue_assignment_time FROM analog-period-445004-k9.techsteer.event_store e JOIN cm_event_queue_changed q ON e.lifecycle_id = q.ids[OFFSET(0)].identifier WHERE e.customer_portfolio_type = 'PREMIUM' ORDER BY TIMESTAMP(q.timestamp) DESC LIMIT 10;"]}
{"table_name": "cm_event_arrival", "description": "Records details of event arrivals including alert status, version, and timestamps. Can be joined with other tables using column 'id.identifier'.", "example_queries": ["List all event arrivals with their lifecycle IDs", "Find event arrivals that occurred in the last month", "Count the number of event arrivals with a specific lifecycle ID", "Show event arrivals that were updated in the last week", "SELECT id.channelId, COUNT(*) as event_count, COUNT(CASE WHEN alert = TRUE THEN 1 END) as alert_count FROM analog-period-445004-k9.techsteer.cm_event_arrival GROUP BY id.channelId ORDER BY event_count DESC;", "SELECT id.identifier, id.payload.schema.customer_id, id.payload.schema.customer_portfolio_type FROM cm_event_arrival WHERE id.payload.schema.customer_portfolio_type = 'PREMIUM';", "SELECT a.id.identifier as lifecycle_id,  a.id.payload.schema.event_type as event_type,  a.id.payload.schema.customer_portfolio_type as customer_type,  u.username as assigned_to,  TIMESTAMP_MILLIS(u.updatedAt) as assignment_time FROM cm_event_arrival a JOIN cm_event_assignee_update u ON a.id.identifier = u.ids[OFFSET(0)].identifier WHERE a.alert = TRUE ORDER BY u.updatedAt DESC;"]}
{"table_name": "cm_event_state_updates", "description": "Records updates to event states including user IDs, state machine IDs, and timestamps. Can be joined with other tables using column 'ids.identifier'.", "example_queries": ["List all state updates with their lifecycle IDs", "Find state updates that occurred in the last month", "Count the number of state updates with a specific lifecycle ID", "Show state updates that were updated in the last week", "SELECT username, COUNT(*) as update_count FROM cm_event_state_updates GROUP BY username ORDER BY update_count DESC", "SELECT ids[OFFSET(0)].identifier as lifecycle_id,   state.id as state, note FROM cm_event_state_updates WHERE note IS NOT NULL AND LENGTH(note) > 0", "SELECT e.lifecycle_id,  e.event_type,  e.customer_id,  s.state.id as current_state,  s.username as updated_by,  TIMESTAMP_MILLIS(s.updatedAt) as state_update_time FROM event_store e JOIN cm_event_state_updates s ON e.lifecycle_id = s.ids[OFFSET(0)].identifier WHERE e.event_type = 'FRAUD_SUSPECTED' ORDER BY s.updatedAt DESC;"]}
{"table_name": "event_store", "description": "Stores detailed information about events including lifecycle ID, payment details, and customer information. Can be joined with other tables using 'lifecycle_id'.", "example_queries": ["List all events with their lifecycle IDs", "Find events that occurred in the last month", "Count the number of events with a specific lifecycle ID", "Show events that were updated in the last week", "SELECT lifecycle_id,  event_type,  sender_transaction_amount,  sender_transaction_currency FROM event_store WHERE sender_transaction_amount > 1000 ORDER BY sender_transaction_amount DESC", "SELECT outcome_decision, COUNT(*) as decision_count FROM event_store GROUP BY outcome_decision ORDER BY decision_count DESC;", "SELECT e.lifecycle_id,  e.event_type,  e.customer_id,  e.sender_transaction_amount,  e.sender_transaction_currency,  e.outcome_decision,  TIMESTAMP_MILLIS(e.created_at) as created_time,  d.start_timestamp,  d.end_timestamp,  s.state.id as current_state,  s.username as updated_by,  q.queueId as current_queue,  u.username as assigned_to FROM event_store e LEFT JOIN cm_driver_master d ON e.lifecycle_id = d.lifecycle_id LEFT JOIN cm_event_state_updates s ON e.lifecycle_id = s.ids[OFFSET(0)].identifier LEFT JOIN  cm_event_queue_changed q ON e.lifecycle_id = q.ids[OFFSET(0)].identifier LEFT JOIN  cm_event_assignee_update u ON e.lifecycle_id = u.ids[OFFSET(0)].identifier WHERE e.outcome_decision = 'REVIEW'"]}
{"table_name": "workflow_rules_vw", "description": "Stores workflow rules including actions, creation details, and conditions. Can be joined with other tables using rulesProjectId.", "example_queries": ["List all workflow rules with their project IDs", "Find workflow rules that were created in the last month", "Count the number of workflow rules with a specific project ID", "Show workflow rules that were updated in the last week"]}
{"table_name": "cm_event_assignee_update", "description": "Records updates to event assignees including user IDs, timestamps, and lifecycle IDs. Can be joined with other tables using columnn 'ids.identifier'.", "example_queries": ["List all assignee updates with their lifecycle IDs", "Find assignee updates that occurred in the last month", "Count the number of assignee updates with a specific lifecycle ID", "Show assignee updates that were updated in the last week", "SELECT ids[OFFSET(0)].identifier as lifecycle_id,  ids[OFFSET(0)].payload.schema.event_type as event_type, username FROM cm_event_assignee_update WHERE ids[OFFSET(0)].payload.schema.event_type = 'FRAUD_SUSPECTED'", "SELECT username, COUNT(*) as assignment_count FROM cm_event_assignee_update GROUP BY username ORDER BY assignment_count DESC", "SELECT  u.username, e.event_type, COUNT(*) as assignment_count, AVG(e.sender_transaction_amount) as avg_transaction_amount FROM  cm_event_assignee_update u JOIN event_store e ON u.ids[OFFSET(0)].identifier = e.lifecycle_id WHERE  u.username IN ('john.doe', 'jane.smith', 'robert.johnson') GROUP BY  u.username, e.event_type ORDER BY  u.username, assignment_count DESC;"]}